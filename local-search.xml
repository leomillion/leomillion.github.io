<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>据最新的数据表明，美国新冠肺炎确诊病例已超过134万例，死亡人数更是足足高达8万。不得不说，这是个让人毛骨悚然的数字。相较之下，最早爆发疫情的中国，疫情于2020年4月份见顶，总感染规模约为9</title>
    <link href="/2020/05/15/%E6%8D%AE%E6%9C%80%E6%96%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%98%8E%EF%BC%8C%E7%BE%8E%E5%9B%BD%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E%E7%A1%AE%E8%AF%8A%E7%97%85%E4%BE%8B%E5%B7%B2%E8%B6%85%E8%BF%87134%E4%B8%87%E4%BE%8B%EF%BC%8C%E6%AD%BB%E4%BA%A1%E4%BA%BA%E6%95%B0%E6%9B%B4%E6%98%AF%E8%B6%B3%E8%B6%B3%E9%AB%98%E8%BE%BE8%E4%B8%87%E3%80%82%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%AF%B4%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%AA%E8%AE%A9%E4%BA%BA%E6%AF%9B%E9%AA%A8%E6%82%9A%E7%84%B6%E7%9A%84%E6%95%B0%E5%AD%97%E3%80%82%E7%9B%B8%E8%BE%83%E4%B9%8B%E4%B8%8B%EF%BC%8C%E6%9C%80%E6%97%A9%E7%88%86%E5%8F%91%E7%96%AB%E6%83%85%E7%9A%84%E4%B8%AD%E5%9B%BD%EF%BC%8C%E7%96%AB%E6%83%85%E4%BA%8E2020%E5%B9%B44%E6%9C%88%E4%BB%BD%E8%A7%81%E9%A1%B6%EF%BC%8C%E6%80%BB%E6%84%9F%E6%9F%93%E8%A7%84%E6%A8%A1%E7%BA%A6%E4%B8%BA9/"/>
    <url>/2020/05/15/%E6%8D%AE%E6%9C%80%E6%96%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%98%8E%EF%BC%8C%E7%BE%8E%E5%9B%BD%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E%E7%A1%AE%E8%AF%8A%E7%97%85%E4%BE%8B%E5%B7%B2%E8%B6%85%E8%BF%87134%E4%B8%87%E4%BE%8B%EF%BC%8C%E6%AD%BB%E4%BA%A1%E4%BA%BA%E6%95%B0%E6%9B%B4%E6%98%AF%E8%B6%B3%E8%B6%B3%E9%AB%98%E8%BE%BE8%E4%B8%87%E3%80%82%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%AF%B4%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%AA%E8%AE%A9%E4%BA%BA%E6%AF%9B%E9%AA%A8%E6%82%9A%E7%84%B6%E7%9A%84%E6%95%B0%E5%AD%97%E3%80%82%E7%9B%B8%E8%BE%83%E4%B9%8B%E4%B8%8B%EF%BC%8C%E6%9C%80%E6%97%A9%E7%88%86%E5%8F%91%E7%96%AB%E6%83%85%E7%9A%84%E4%B8%AD%E5%9B%BD%EF%BC%8C%E7%96%AB%E6%83%85%E4%BA%8E2020%E5%B9%B44%E6%9C%88%E4%BB%BD%E8%A7%81%E9%A1%B6%EF%BC%8C%E6%80%BB%E6%84%9F%E6%9F%93%E8%A7%84%E6%A8%A1%E7%BA%A6%E4%B8%BA9/</url>
    
    <content type="html"><![CDATA[<p>​        据最新的数据表明，美国新冠肺炎确诊病例已超过134万例，死亡人数更是足足高达8万。不得不说，这是个让人毛骨悚然的数字。相较之下，最早爆发疫情的中国，疫情早于2020年4月份见顶，总感染规模约为9.5万。相较于美国及其他国家，疫情的控制情况着实优秀。</p><p>​        都说，在这次全球面临的疫情危机面前。中国再次交出了一份优秀的答卷。在国家高层及其各地方政府的带领下，中国人民万众一心，努力配合防疫工作，积极参与到与新冠疫情的斗争当中，且效果拔群。不得不说，这一切成果，都得益于中国特色社会主义的鲜明影响。</p><p>​        改革开放以来，我们党全部的时间和理论的主题就是坚持和发展中国特色社会主义。而在社会主义核心价值观的主要内容中，则倡导了爱国、敬业、诚信、友善。团结和谐，是社会主义极为重要的价值，且拥护了集体主义的道德观，而道德更是人们关于行为规范的自觉意识。于此同时，道德也约束着人们服从社会的利益，维护了社会的稳定。在社会主义道德观的约束下，人们把集体利益置于自身利益之上，很好地实现了集体利益与个人利益的统一。</p><p>​        在与新冠病毒的抗争当中，除开统一高效的指挥体系，科学精准的防控策略外，群众有着高度的自觉性，自觉地遵从政府的领导，响应国家的号召也是防疫抗疫成功的重要因素之一。14亿人民团结如一，自觉履行公民义务，做好居家隔离，自我防护，识大体，顾大局。这些成果，离不开中国特色社会主义的坚持和发展。</p><p>​        说起来，以美国为首的很多资本主义国家，论经济，论技术，论资源实力，并不低下。然而为何在天灾疫情面前节节败退？在这不做过多阐述了。但是有一点，在天灾人祸面前，一个国家的群众如果依旧我行我素，不响应国家号召积极防治，那结果恐怕也不言而喻了。</p><p>​        最后，愿祖国能早日战胜新冠，致敬所有医护人员和奋斗在一线的工作者，你们辛苦了。愿这场战疫早日结束！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Struts2 理解</title>
    <link href="/2020/05/15/Struts2%20%E7%90%86%E8%A7%A3/"/>
    <url>/2020/05/15/Struts2%20%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Struts2-理解"><a href="#Struts2-理解" class="headerlink" title="Struts2 理解"></a>Struts2 理解</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Struts2是一个基于MVC设计模式的Web应用框架，在MVC设计模式种Struts2作为<strong>控制器（Controller）</strong>来建立模型与试图的数据交互。Struts2以WebWork为核心，采用拦截器（Interceptor）的机制来处理用户的请求，使业务逻辑控制器与Servlet API完全脱离开来。</p></blockquote><h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><p><img src="https://i.loli.net/2020/05/15/lCMu9zraEoWUhjY.png" srcset="/img/loading.gif" alt="Struts2运行原理.png"></p><ul><li><p>当WEB容器收到一个请求时，它讲请求传递给一个标准的过滤器链（如ActionContentCleanUp）</p></li><li><p>FilterDispatcher（核心控制器）被调用，它调用ActionMapper确定请求调用哪个Action，ActionMapper返回一个收集了Action信息的ActionMapping对象</p></li><li><p>FilterDispatcher讲控制权委派给ActionProxy，ActionProxy调用配置管理器（ConfigurationManager）从配置文件中读取配置信息，然后创建ActionInvocation对象，ActionInvocation被创建的同时，填充了需要的所有的对象和信息，它在调用action之前会一次调用所用配置的拦截器（Intercepter）</p></li><li><p>一旦Action执行返回结果字符串，ActionInvocation负责根据struts.xml中的配置查找结果字符串对应的Result，然后执行这个Result，一般Result会调用一些模板（例如JSP）来呈现页面。</p></li><li><p>之后拦截器会被再次执行（顺序和Action执行之前相反），最后响应会被返回给web.xml中配置的那些过滤器（FilterDispatcher等）。</p></li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>实现了MVC模式，层次结构清晰，是程序员只需要关注业务逻辑的实现</li><li>丰富的标签库，大大提高了开发效率</li><li>Struts2提供了丰富的拦截器实现</li><li>通过配置文件，就可以掌握整个系统哥哥部分之间的关系</li><li>异常处理机制，只需在配置文件中配置异常的映射，即可对异常做响应的处理。</li><li>Struts2的可拓展性高。Struts2的核心jar包中由一个struts-default.xml文件，在该文件中设置了一些默认的bean，resultType类型，默认拦截器栈等，所有这些默认设置，用户都可以利用配置文件更改，可以更改为自己开发的bean，resultType等。因此用户开发了插件的话只需要很简单的配置就可以很容易的和Struts2框架融合，这就实现了框架对插件的可拔插的特性。</li><li>面向切面编程的思想在Struts2中也有了很好的体现。最重要的体现就是拦截器的使用，拦截器就是一个一个的小功能单位，用户可以将这些拦截器合并成一个大的拦截器，这个合成的拦截器就像单独的拦截器一样，只需要将他配置到一个Action中就可以了。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>Struts2中Action中取得从JSP中传过来的参数时还是有点麻烦。可以为Struts2中的Action中的属性配置上Getter和Setter方法，通过默认拦截器，就可以讲请求参数设置到这些属性中。如果用这种方式，当请求参数很多时，Action类就会被这些表单属性弄得很臃肿，让人感觉回很乱。还有Action中的属性不但可以用来获取请求参数还可以输出到JSP中，这样就会更乱。假设从JSP_1中获取了参数money=100000，但是这个Action还要输出到JSP_2中，但是输出的格式却不同，money=100,000，这样这个Action中的money中的值就变了。</li><li>校验感觉还是比较繁琐，太杂乱，也太细化了，如果校验出错只能给用户提示一些信息。如果有多个字段，每个字段出错时返回到不同的页面，这个功能在Struts2框架下借助框架提供的校验逻辑就不容易实现。</li><li>安全性有待提高。Struts2暴处2个高位安全漏洞，一个是使用缩写的导航参数前缀时的远程代码执行漏洞，另一个是使用缩写的重定向参数前缀时的开放式重定向漏洞。这些漏洞可使黑客取得网站服务器的“最高权限”，从而使企业服务器变成黑客手中的“鱼肉”。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>虚拟IP（VIP）原理</title>
    <link href="/2020/05/15/%E8%99%9A%E6%8B%9FIP%EF%BC%88VIP%EF%BC%89%E5%8E%9F%E7%90%86/"/>
    <url>/2020/05/15/%E8%99%9A%E6%8B%9FIP%EF%BC%88VIP%EF%BC%89%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟IP（VIP）原理"><a href="#虚拟IP（VIP）原理" class="headerlink" title="虚拟IP（VIP）原理"></a>虚拟IP（VIP）原理</h1><h2 id="1、高可用性概念"><a href="#1、高可用性概念" class="headerlink" title="1、高可用性概念"></a>1、高可用性概念</h2><p>​        高可用性HA（High Availability）指的是通过尽量缩短因日常维护操作（己画）和突发的系统崩溃（非计划）所导致的停机时间，以提高系统和应用的可用性。</p><p>​        HA系统是目前企业防止核心计算机系统因故障停机的最有效手段。</p><h2 id="2、实现高可用性的方式"><a href="#2、实现高可用性的方式" class="headerlink" title="2、实现高可用性的方式"></a>2、实现高可用性的方式</h2><p>​        实现HA的方式，一般采用两台及其同时完成一项功能，比如数据哭服务器，平常只有一台机器对外提供服务，另一台及其作为热备，当这台机器出现故障的时候，自动动态切换到另一台热备的机器。</p><h2 id="3、故障检测的实现方式"><a href="#3、故障检测的实现方式" class="headerlink" title="3、故障检测的实现方式"></a>3、故障检测的实现方式</h2><h3 id="心跳"><a href="#心跳" class="headerlink" title="- 心跳"></a>- 心跳</h3><p>​        采用定时发送一个数据包，如果及其多长时间没响应，就认为是发生故障，自动切换到热备的机器上去。</p><h3 id="虚拟IP"><a href="#虚拟IP" class="headerlink" title="- 虚拟IP"></a>- 虚拟IP</h3><p>​        什么是虚拟IP？</p><p>​        即 <strong>VIP（Virtual  Internet Protocol）</strong>，就是要给未分配给真实主机的IP，也就是说对外提供数据库服务器的主机除了有一个真实IP外还有一个虚拟IP，使用这两个IP中的任何一个都可以连接到这台主机，所有项目中数据哭链接一项配置的都是这个虚IP，当服务器发生故障无法对外提供服务时，动态将这个虚拟IP切换到备用机器。</p><p>​        </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Web Service</title>
    <link href="/2020/05/08/Web%20Service/"/>
    <url>/2020/05/08/Web%20Service/</url>
    
    <content type="html"><![CDATA[<h1 id="Web-Service"><a href="#Web-Service" class="headerlink" title="Web Service"></a>Web Service</h1><h2 id="Web-service-基本概念"><a href="#Web-service-基本概念" class="headerlink" title="Web service 基本概念"></a>Web service 基本概念</h2><h3 id="什么是web服务"><a href="#什么是web服务" class="headerlink" title="什么是web服务"></a>什么是web服务</h3><p>这里列举一些常见的web服务：</p><p>手机淘宝、京东</p><p>天气预报</p><p>手机号码归属</p><p>股票查询</p><p>发手机短消息</p><p>手机充值功能</p><p>中英文翻译</p><p>银行转账业务</p><p>公司的“进销存系统”在某商品缺货是自动给供应商下订单</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>（1）webservice即web服务，它是一种跨编程语言呵跨操作系统平台的远程调用技术。</p><p>（2）JAVA中共有三种WebService规范，分别是JAX-WS(JAX-RPC)、JAXM&amp;SAAJ、JAX-RS</p><p>（3）webService三要素：soap、wsdl、uddi</p><h3 id="webservice开发规范"><a href="#webservice开发规范" class="headerlink" title="webservice开发规范"></a>webservice开发规范</h3><p>JAVA中共有三种WebService规范，分别是JAXM&amp;SAAJ、JAX-WS(JAX-RPC)、JAX-RS</p><h4 id="JAX-WS"><a href="#JAX-WS" class="headerlink" title="JAX-WS"></a>JAX-WS</h4><p>JAX-WS    :    JAVA API for XML-WebService</p><p>JDK1.6自带的版本为jax-ws2.1，其底层支持为JAXB、JAX-WS(JSR224)规范的API位于javax.xml.ws.*包，其中大部分都是注解，提供API操作Web服务（通常在客户端使用的较多，由于客户端可以借助SDK生成，因此这个包中的API我们较少会直接使用）</p><h4 id="JAXM-amp-SAAJ"><a href="#JAXM-amp-SAAJ" class="headerlink" title="JAXM&amp;SAAJ"></a>JAXM&amp;SAAJ</h4><p>JAXM    :    JAVA API For XML Message</p><p>主要定义了包含了发送呵接收消息所需要的API，相当于Web服务的服务端，其API位于javax.messaging.*包，它是JAVA EE的可选包，因此需要单独下载。</p><h4 id="JAX-RS"><a href="#JAX-RS" class="headerlink" title="JAX-RS"></a>JAX-RS</h4><p>JAX-RS    ：    是JAVA针对REST（RepresentationState Transfer）风格指定的一套Web服务规范。</p><p>由于推出的较晚，该规范（JSR311,目前JAX-RS的版本为1.0）并未随JDK1.6一起发行。</p><p>需要到CP上单独下载JAX-RS规范的接口，其API位于java.ws.rs.*包</p><h3 id="SOAP协议"><a href="#SOAP协议" class="headerlink" title="SOAP协议"></a>SOAP协议</h3><p>SOAP即简单对象访问协议：Simple Object Access Protocol</p><ul><li><p>它是用于交换XML（标准通用标记语言下的一个子集）编码信息的轻量级协议。它有三个主要方面：XML-envelope为描述信息内容呵如何处理内容定义了框架，将程序对象编码成为XML对象的规则，执行远程过程调用（RPC）的约定，SOAP可以运行在任何其他传输协议上。</p></li><li><p>SOAP作为一个基于XML语言的协议用于网上传输数据。</p></li><li><p>SOAP = 在HTTP的基础上+XML数据</p></li><li><p>SOAP是基于HTTP的。</p></li><li><p>SOAP的组成如下</p><ul><li>Envelope - 必须的部分，以XML的根元素出现</li><li>Headers - 可选的</li><li>Body - 必须的，在body部分，包含要执行的服务器的方法，和发送服务器的数据</li></ul></li></ul><h3 id="WSDL说明书"><a href="#WSDL说明书" class="headerlink" title="WSDL说明书"></a>WSDL说明书</h3><p>Web Service描述语言WSDL（SebService Definition Language）就是用及其能阅读的方式提供的一个正式描述文档而基于XML（标准通用标记语言下的一个子集）的语言，用于描述Web Service及其函数、参数和返回值，因为是基于XML的，所以WSDL即使机器可阅读的，又是人可阅读的。</p><p>wsdl说明书：</p><ul><li>通过wsdl说明书，就可以描述webservice服务端对外发布的服务</li><li>wsdl说明书是一个基于xml文件，通过xml语言描述整个服务</li><li>在wsdl说明中，描述了：<ul><li>对外发布的服务名称（类）</li><li>接口方法名称（方法）</li><li>接口参数（方法参数）</li><li>服务返回的数据类型（方法返回值）</li></ul></li></ul><h3 id="UDDI"><a href="#UDDI" class="headerlink" title="UDDI"></a>UDDI</h3><p>Web服务提供商又如何将自己开发的Web服务公布到因特网上</p><p>这就需要使用倒UDDI了，UDDI的话，是一个跨产业，跨平台的开放性架构，可以帮助Web服务提供商在互联网上发布Web服务的信息。</p><p>UDDI是一种目录服务，企业可以通过UDDI来注册和搜索Web服务。</p><p>简单地说，UDDI就是一个目录，只不过在这个目录中存放的是一些关于Web服务的信息而已。</p><p>并且UDDI通过SOAP进行通讯，构建于.Net之上。</p><p>UDDI 即 Universal Description，Discovery and Integration，也就是通用的描述，发现以及整合。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>WebService可以适用于应用程序集成、软件重用、跨防火墙通信等需求。不同的业务要求不同，具体如下：</p><ul><li>跨防火墙通信</li><li>应用系统集成</li><li>软件和数据重用</li></ul><p>简单来说，如果一个功能，需要被多个系统使用可以使用webservice开发一个服务端接口，共不同的客户端应用。主要应用在企业内部系统之间的接口调用、面向公网的webservice服务。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Thinging in Java&#39;s note</title>
    <link href="/2020/05/08/Thinging%20in%20Java&#39;s%20note/"/>
    <url>/2020/05/08/Thinging%20in%20Java&#39;s%20note/</url>
    
    <content type="html"><![CDATA[<h1 id="【Thinking-In-Java】–Note"><a href="#【Thinking-In-Java】–Note" class="headerlink" title="【Thinking In Java】–Note"></a>【Thinking In Java】–Note</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java的前身为SmallTalk。</p><blockquote><p>smallTalk<strong>五大基本特征</strong>:</p></blockquote><ul><li><p>对象</p><p>– 在Smalltalk中，任何东西都是对象，数据结构、物理装置、概念、文件、可执行程序段、以及源代码程序段都是对象，连支持环境的组成部分，如编译工具喝调试工具等也都是对象。</p><p>– 一切需要按对象和对象行为的方式来思考和行动。</p></li><li><p>类</p><p>– 类是定义某种对象特征的对象。类有名字，它表明了它所代表的对象的类型。由某个类代表的对象被称作该类的实例。类按超类、子类层次排列，其中子类是比超累更特殊的类，他能继承超类的特性。类的协议描述提供了建立该类实例的途径。对象所能相应的所有动作均在它的类描述中定义。</p></li><li><p>实例</p><p>– 实例是某个类对象，他的特性由该类的协议描述来定义。实例所能响应的动作由它的类协议定义。</p></li><li><p>消息</p><p>– 消息是发送给某个对象的动作标识符。它指示对象执行某些动作。只有当消息包含在某个对象的类协议描述中时，该对象才能相应该消息。某个类的实例能相应的所有消息都必须在该类或它的超类的协议描述中定义。</p></li><li><p>方法</p><p>– 方法是消息的详细实现。类的协议描述应包括它的实例所能相应的每个消息的方法细节。方法精确对象如何响应消息。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud</title>
    <link href="/2020/05/08/SpringCloud/"/>
    <url>/2020/05/08/SpringCloud/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="前提知识"><a href="#前提知识" class="headerlink" title="前提知识"></a>前提知识</h2><p>​    <strong>SpringMVC</strong></p><p>​    <strong>Spring/SpringBoot</strong></p><p>​    <strong>Mybatis</strong></p><p>​    <strong>Maven</strong></p><p>​    <strong>git</strong></p><h2 id="SpringCloud简介"><a href="#SpringCloud简介" class="headerlink" title="SpringCloud简介"></a>SpringCloud简介</h2><p>SpringCloud不是一种技术，大概21种技术。</p><p>​    SpringCloud是要给分布式的整体解决方案，SpringCloud为开发者提供了在分布式系统（配置管理，服务发现，熔断，路由，微代理，控制总线，一次性token，全局锁，leader选举，分布式session，集群状态）中快速构建的工具，使用SpringCloud的开发者可以快速的启动服务或构建应用、同时能够快速和云平台资源进行对接。</p><p>​    单一的主机所能处理的数据是有限的，所以为了得到更高性能的设计方案，一定要采用多台主机，可是多台主机之间该如何进行分配呢？</p><p>​    于是对于分布式的开发设计，最初就有了以下的几点思考</p><ul><li>分布式的开发如何可以让代码更安全</li><li>分布式开发的时候如何进行有效的通讯</li><li>在进行分布式处理的时候到底如何进行程序的功能划分</li></ul><p>对于很多有经验的工程师实际上都已经清楚的知道了现在项目开发之中要进行的分布式的设计：</p><ul><li>WEB集群：考虑到多用户并发访问的处理速度</li><li>业务中心：在进行一些庞大的项目设计过程之中，应该有更加完善的业务处理，这样所有的客户端（服务器）直接调用这些业务中心的操作就可以完成具体的功能</li><li>数据库集群：解决了数据的存储问题，以及数据的分片管理</li></ul><p>对于分布式的项目开发按照历史的发展经历过如下的一些技术：</p><ul><li>CORBA:公共对象请求代理架构，它是一种开发的标准，而且也是许多语言都支持的开发标准；</li><li>RMI（远程方法调用）：该技术是SUN提出的，该技术出现的最大特征是希望可以和CORBA进行市场竞争，这时候出现了一个问题：很多公司不认可这项技术；<ul><li>然而RMI第一次提出了远程接口的概念</li></ul></li><li>后来SUN的设计师发现，RMI好用，但是步入CORBA广泛，便开始思考是否能基于CORBA做一些更好的设计呢，于是就产生了一个新的协议：RMI-IIOP协议，而这个协议用在了EJB技术上。<ul><li>EJB留给世界上的只是他优秀的理论，然而实现很糟糕，但是这个理论开始被很多开源框架学习。</li></ul></li></ul><p>如果项目中需要使用WebService技术进行开发，则有如下问题：</p><ul><li>速度太慢，处理速度不行</li><li>如果要想采用远程接口的方式调用，则要利用开发工具生成一堆的工具类代码；</li></ul><p>后来2005年的时候WebService在郑哥世界上继续发酵，形成了又一大核心神器：SOA，提出了一个服务总线（ESB）的概念。</p><ul><li>SOA提出的服务总线又成为了新一代分布式的讨论需求，如果将所有的服务管理起来，就成了服务总线，那么所有的开发者直接调用里面的服务就完成一些功能，后来又不断出现了许多的RPC开发技术，其中在国内具有代表性的就是ali的DUBBO技术，不过这个时候最快的是Rest，因为JSON的广泛应用，就如同最初的XML造就了WebService，Json造就了Rest服务，人们认为我们的操作应该更加简单一些。随着Rest技术的广泛认可，Spring终于得到了一个新的机会：利用Rest进行RPC技术实现，这样的操作技术很快，而且占用的带宽较少。SpringCloud真正的将整个的Rest实现技术，并且这一技术已经开始出现又行业的同一趋势，而且SpringCloud也依照SpringBoot的开发技术，可以实现项目的打包发布以击单独运行，这一点都符合于当前云时代的开发需求。</li></ul><h2 id="SpringCloud-与-SpringBoot的关系"><a href="#SpringCloud-与-SpringBoot的关系" class="headerlink" title="SpringCloud 与 SpringBoot的关系"></a>SpringCloud 与 SpringBoot的关系</h2><p>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来。为哥哥微服务之间提供：欸之管理，服务发现，断路器，路由，微代理，事件总线，全局锁，决策竞选，分布式会话等等集成服务。</p><p>SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖的关系。</p><p>SpringBoot专注于快速，方便的开发单个微服务个体，SpringCloud 关注全局的服务治理框架。</p><h2 id="SpringCloud开发架构"><a href="#SpringCloud开发架构" class="headerlink" title="SpringCloud开发架构"></a>SpringCloud开发架构</h2><p><strong>SpringCloud整体核心架构只有一点：</strong></p><p>​    Rest服务，也就是说在整个SpringCloud配置过程之中，所有的配置处理都是围绕着Rest完成，在整个Rest处理之中，一定要有两个端：服务的提供者（Provider）、服务的消费者（Consumer）。</p><p>​    SpringCloud微服务 = ==Rest服务==（需要掌握）</p><p>​    如果想要更好的使用Rest服务，需要考虑以下问题：</p><h3 id="Eureka-注册中心"><a href="#Eureka-注册中心" class="headerlink" title="Eureka 注册中心"></a>Eureka 注册中心</h3><p>​    所有的微服务地址一定会非常的多，所以为了统一管理这些地址信息，也为了可以及时的告诉用户哪些地址不可用，所以应该准备一个==分布式==的注册中心，并且该分布中心应该具备==HA机制==，为了告诉并且方便的进行所有服务的注册操作，SpringCloud里面提供了一个Eureka的注册中心。</p><p>​    对于整个WEB端的架构（SpringBoot实现）可以轻松方便的进行WEB程序的编写，而后利用Nginx或者apache实现负载均衡处理，但是WEB端出现了负载均衡，那么业务端呢？应该也提供多个业务端进行负载均衡，我们需要将参与到负载均衡的业务端在Eureka中进行注册。</p><h3 id="Feign-负载均衡、提供接口"><a href="#Feign-负载均衡、提供接口" class="headerlink" title="Feign 负载均衡、提供接口"></a>Feign 负载均衡、提供接口</h3><p>​    在进行客户端使用Rest架构调用的时候，往往都需要一个调用地址，即使现在使用了Eureka作为注册中心，那么他也需要一个明确的调用地址，可是如果所有的操作都利用调用地址的方式来处理，程序的开发者最方便应用的工具应该是接口，所以希望将所有的Rest服务的内容以接口的方式出现，所以出现了==Feign==。</p><h3 id="Hystrix-熔断处理机制"><a href="#Hystrix-熔断处理机制" class="headerlink" title="Hystrix 熔断处理机制"></a>Hystrix 熔断处理机制</h3><p>在进行整体的微架构设计的时候由于牵扯到的问题还是属于PRC，所以就必须考虑熔断处理机制，实际上所谓的熔断就好比生活中使用的保险丝一样，有了保险丝在一些设备出现了故障之后依然可以保护家庭电器可以正常使用。如果说现在有若干个微服务，并且这些微服务之间允许互相调用，例如：A微服务调用了B微服务，B微服务调用了C微服务。如果在实际的项目设计过程之中没有处理好熔断机制，那么就会产生雪崩效应。所以为了防止这样的问题出现，SpringCloud中提供了Hystrix熔断处理机制，以保证某个微服务出现问题之后依然可以正常使用。一个强壮的系统，每个微服务都应该包含有熔断处理，该方法依然可用，不过返回的内容将会变成一个错误信息。</p><h3 id="Zuul-代理机制"><a href="#Zuul-代理机制" class="headerlink" title="Zuul 代理机制"></a>Zuul 代理机制</h3><p>​    通过Zuul的代理用户只需要知道指定的路由的路径就可以访问指定的微服务的信息，这样就更好的体现了Java中“Key==Value”的设计思想，而且所有的微服务通过Zuul进行代理之后也可以更加合理的进行名称的隐藏。</p><h3 id="Spring-Cloud-Config-项目配置"><a href="#Spring-Cloud-Config-项目配置" class="headerlink" title="Spring Cloud Config 项目配置"></a>Spring Cloud Config 项目配置</h3><p>​    在SpringBoot学习的时候一直强调过一个问题：在SpringBoot里面强调的是一个“零配置”的问题，即不需要配置温和配置文件，但是这一点上并无法完全体现，因为在整体的设计里面，依然会提供application.yml配置文件，那么如果在微服务的创建之中，那么一定会有成百上千个配置文件的出现。如果你的主机要进行机房变更，所有的服务的IP都要发生改变，这样对程序的维护是不方便的。为了解决这样的问题，SpringCloud提供了一个SpringCloudConfig的程序组件，利用整个组件就可以直接基于GIT或SVN来进行配置文件的管理。</p><p>​    <strong><em>在整体设计上，SpringCloud更好的实现了RPC的架构设计，而且使用了Rest作为通讯的基础，这一点是他的成功之处，而且由于大量的使用了netlix公司的产品技术，所以这些技术也有可靠的保障。</em></strong></p><h2 id="SpringCloud的基本架构实现"><a href="#SpringCloud的基本架构实现" class="headerlink" title="SpringCloud的基本架构实现"></a>SpringCloud的基本架构实现</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot与Web开发</title>
    <link href="/2020/05/08/Spring%20Boot%E4%B8%8EWeb%E5%BC%80%E5%8F%91/"/>
    <url>/2020/05/08/Spring%20Boot%E4%B8%8EWeb%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot与Web开发"><a href="#Spring-Boot与Web开发" class="headerlink" title="Spring Boot与Web开发"></a>Spring Boot与Web开发</h1><h2 id="使用SpringBoot："><a href="#使用SpringBoot：" class="headerlink" title="使用SpringBoot："></a>使用SpringBoot：</h2><p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置即可运行起来；</strong></p><p><strong>3）、自己编写业务代码；</strong></p><p>自动配置原理？</p><p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些欸之？能不能扩展？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxxAutoConfiguration:帮我们给容器中自动配置组件</span><br><span class="line">xxxProperties：配置类封装配置文件的内容</span><br></pre></td></tr></table></figure><h2 id="SpringBoot对静态资源的映射规则"><a href="#SpringBoot对静态资源的映射规则" class="headerlink" title="SpringBoot对静态资源的映射规则"></a>SpringBoot对静态资源的映射规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;spring.resources&quot;, ignoreUnknownFields &#x3D; false)</span><br><span class="line">public class ResourceProperties &#123;&#x2F;&#x2F;可以设置和静态资源有关的参数，缓存时间等</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">.addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">&#125;</span><br><span class="line">String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">.addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//欢迎页面访问</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line"><span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line"><span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）、所有/webjars/**，都去classpath：/META-INF/resources/webjars找资源：</p><p>​        webjars：以jar包的方式引入静态资源；</p><p><a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a></p><p>例如引入jquery包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.webjars&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jquery&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>2）、“/**”访问当前项目的任何资源(静态资源的文件夹)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/resources/"</span>, </span><br><span class="line"><span class="string">"classpath:/static/"</span>, </span><br><span class="line"><span class="string">"classpath:/public/"</span></span><br><span class="line"><span class="string">"/"</span>：当前项目的根路径</span><br></pre></td></tr></table></figure><p>访问路径：localhost:8080/xxx</p><p>没有配置的情况下将自动到以上默认目录下访问资源</p><p>3）、欢迎页：静态资源文件下的所有index.html页面；被”/**“映射</p><p>localhost:8080/  自动寻找index.html页面</p><p>4）、自定义静态资源访问路径可以在properties文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sring.resources.static-Location=classpath:/hello/,classpath:/leoroc/</span><br><span class="line">//多个路径可用逗号进行分割</span><br></pre></td></tr></table></figure><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>JSP、Freemarker、Velocity、Thymeleaf……</p><p>SpringBoot推荐使用的模板引擎Thymeleaf</p><p>语法更简单，功能更强大。</p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><p>1、引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.11.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tyymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">tyymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入thymeleaf引擎--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、Thymeleaf使用&amp;语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure><p>只要我们把html页面放在classpath：/templates/，thymeleaf就能自动渲染</p><p>使用：</p><p>​    1、导入thymeleaf的名称空间，获取代码语法提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"html://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    2、使用thymeleaf语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/successed"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">    <span class="comment">//classath:/tempats/success.html</span></span><br><span class="line">    map.put(<span class="string">"hello"</span>,<span class="string">"你好"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将div中的文本内容设置为我们指定的值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>这里显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：如若在方法注解中加入Responsbody,将无法通过引擎模板进行解析，而是直接返回文本信息</p><p>3、语法规则</p><p>例如：th:text:改变当前元素里面的文本内容；</p><p>​    th：任意html属性例如</p><pre><code>&lt;div th:id=&quot;${hello}&quot;th:class=&quot;${hello}&quot; th:text=&quot;${hello}&quot;&gt;这里显示欢迎信息&lt;/div&gt;</code></pre><p>详细语法请自行学习，在这不做过多阐述</p><h2 id="Spring-MVC-auto-configuration"><a href="#Spring-MVC-auto-configuration" class="headerlink" title="Spring MVC auto-configuration"></a>Spring MVC auto-configuration</h2><h3 id="Spring-Boot-SpringMVC自动配置"><a href="#Spring-Boot-SpringMVC自动配置" class="headerlink" title="Spring Boot SpringMVC自动配置"></a>Spring Boot SpringMVC自动配置</h3><p>Spring Boot 自动配置好了SringMVC</p><p>以下是SpringBoot对SpringMVC的默认：</p><ul><li><p>inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.</p><ul><li><p>自动配置了ViewResolver，视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染(转发，重定向)</p></li><li><pre><code class="JAVA"><span class="meta">@Bean</span><span class="meta">@ConditionalOnBean</span>(ViewResolver<span class="class">.<span class="keyword">class</span>)</span><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">name</span> </span>= <span class="string">"viewResolver"</span>, value = ContentNegotiatingViewResolver<span class="class">.<span class="keyword">class</span>)</span><span class="class"><span class="title">public</span> <span class="title">ContentNegotiatingViewResolver</span> <span class="title">viewResolver</span>(<span class="title">BeanFactory</span> <span class="title">beanFactory</span>) </span>{   ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();   resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager<span class="class">.<span class="keyword">class</span>))</span>;   <span class="comment">// ContentNegotiatingViewResolver uses all the other view resolvers to locate</span>   <span class="comment">// a view so it should have a high precedence</span>   resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);   <span class="keyword">return</span> resolver;}&lt;!--￼<span class="number">12</span>--&gt;</code></pre></li></ul></li></ul><p>​    我们自己添加的格式器转换器，我们只需要在容器中即可</p><ul><li>Support for HttpMessageConverters (see below)<ul><li>HttpMessageConverters ：消息转换器，SpringMVC用来转换Http请求和响应的：User –&gt; json;是从容器中确定的，获取所有的HttpMessageConverter;</li><li>我们自己给容器中添加HttpMessageConveter，只需要将自己的组件添加到容器中（@Bean @Componet）</li></ul></li><li>Automatic registration of MessageCodesResolver (see below)<ul><li>MessageCodesResolver 用来定义错误代码生成规则的</li></ul></li><li>Static index.html support.<ul><li>静态页面访问</li></ul></li><li>Custom Favicon support (see below).<ul><li>图标定制</li></ul></li><li>Automatic use of a ConfigurableWebBindingInitializer bean (see below).<ul><li>我们可以配置一个ConfigurableWebBindingInitializer来替换</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化WebDataBinder：Web数据绑定器</span><br><span class="line">请求数据&#x3D;&#x3D;&#x3D;&#x3D;JavaBean</span><br></pre></td></tr></table></figure><p>org.springframework.boot</p><h3 id="SpringMVC扩展"><a href="#SpringMVC扩展" class="headerlink" title="SpringMVC扩展"></a>SpringMVC扩展</h3><p>原本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型，不能标注@EnableWebMvc;</p><p>既保留了所有的自动配置，也能用我们扩展的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用WebMvcConfigurer可以用来扩展SpringMVC的功能</span><br><span class="line">@Configuration</span><br><span class="line">public class MyMvcConfig implements WebMvcConfigurer &#123;</span><br><span class="line">    &#x2F;&#x2F;添加一个视图映射</span><br><span class="line">    @Override</span><br><span class="line">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">        &#x2F;&#x2F;浏览器发送请求 &#x2F;leoroc 请求来到 success</span><br><span class="line">        registry.addViewController(&quot;&#x2F;leoroc&quot;).setViewName(&quot;success&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：</p><p>​    1.WebMvcAutoConfiguration是SpringMVC的自动配置类</p><p>​    2.在做其他自动配置时会导入：@Import（EnableWebMvcConfiguration.class）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration equivalent to &#123;<span class="doctag">@code</span> <span class="doctag">@EnableWebMvc</span>&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebMvcProperties mvcProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebMvcRegistrations mvcRegistrations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EnableWebMvcConfiguration</span><span class="params">(ResourceProperties resourceProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;WebMvcProperties&gt; mvcPropertiesProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;WebMvcRegistrations&gt; mvcRegistrationsProvider, ListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line"><span class="keyword">this</span>.mvcProperties = mvcPropertiesProvider.getIfAvailable();</span><br><span class="line"><span class="keyword">this</span>.mvcRegistrations = mvcRegistrationsProvider.getIfUnique();</span><br><span class="line"><span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.容器中所有的WebMvcConfigurer都会一起起作用</p><p>4.所以我们的配置类也会被调用</p><p>效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><p>5.全面接管SpringMVC</p><p>SpringBoot对SpringMVC的自动配置不需要了，所有都由我们自己配置自己整合；</p><p>只需要在配置类中添加@EnableWebMvc即可（自动配置将会失效：可以通过直接访问localhost：8080进行试验，会发现默认访问index页面失效了）；</p><p>一般不会使用全局接管的方式进行配置。<br>失效原理：</p><p>@EnableWebMvc的核心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">         <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurer</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">WebMvcConfigurationSupport</span>.<span class="title">class</span>)//容器中没有这个组件的时候，这个自动配置才生效</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(<span class="title">Ordered</span>.<span class="title">HIGHEST_PRECEDENCE</span> + 10)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123; DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">TaskExecutionAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">      <span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)//容器中没有这个组件的时候，这个自动配置才生效，而EnableWebMvc将WebMvcConfigurationSupport组件导入进来了，所以WebMvcAutoConfiguration不生效</p><h2 id="如何修改SpringBoot的默认配置"><a href="#如何修改SpringBoot的默认配置" class="headerlink" title="如何修改SpringBoot的默认配置"></a>如何修改SpringBoot的默认配置</h2><h3 id="模式一"><a href="#模式一" class="headerlink" title="模式一"></a>模式一</h3><p>​    SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）,如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><h3 id="模式二"><a href="#模式二" class="headerlink" title="模式二"></a>模式二</h3><p>​    在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置（具体参照以上扩展介绍）</p><h2 id="RestfulCRUD"><a href="#RestfulCRUD" class="headerlink" title="RestfulCRUD"></a>RestfulCRUD</h2><p>Rest指的是表述性状态转移：Representational State Transfer</p><p>RESTFUL是一种网络应用程序的设计风格和开发方式，基于HTTP，可以使用XML格式定义或JSON格式定义。</p><p>特点：</p><p>1、每一种URL</p><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p>1、编写国际化配置文件</p><p>2、使用ResourceBundleMessageSource管理国际化资源文件</p><p>3、在页面中使用fmtmessage取出国际化内容</p><p>步骤:</p><p>1)、编写国际化配置文件，抽取页面需要显示的国际化消息。</p><p>2)、SpringBoot已经自动配置好了管理国际化资源文件的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyLocaleResolver implements LocaleResolver &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Locale resolveLocale(HttpServletRequest request) &#123;</span><br><span class="line">        String l &#x3D; request.getParameter(&quot;l&quot;);</span><br><span class="line">        Locale locale &#x3D; Locale.getDefault();</span><br><span class="line">        if(StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] splite &#x3D; l.split(&quot;_&quot;);</span><br><span class="line">            locale &#x3D; new Locale(splite[0],splite[1]);</span><br><span class="line">        &#125;</span><br><span class="line">        return locale;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3)、在application中配置国际化配置文件路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##国际化配置文件路径配置,默认实在类路径根目录下root/message.properties</span><br><span class="line">spring.messages.basename=i18n/login</span><br></pre></td></tr></table></figure><p>4)、在标签中采用th：text=“#{xxxxx}”的方式配置国际化切换，最终效果将会根据浏览器的默认第一语言进行切换</p><p>原理：</p><p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）</p><h2 id="配置嵌入式Servlet容器"><a href="#配置嵌入式Servlet容器" class="headerlink" title="配置嵌入式Servlet容器"></a>配置嵌入式Servlet容器</h2><p>1、定制和修改Servlet容器的相关配置：</p><p>方法一：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port=8080</span><br><span class="line">server.context-path=/crud</span><br><span class="line"></span><br><span class="line">//通用的servlet容器设置</span><br><span class="line">server.xxx</span><br><span class="line">//Tomcat的设置</span><br><span class="line">server.tomcat.xxx</span><br></pre></td></tr></table></figure><p>方法二：编写一个EmbeddedServletContainerCustomizer：嵌入式的Servlet容器定制器</p><p>通过这种形式来修改和定制Servlet的相关配置</p><p>推荐在配置文件中进行修改：简单，阅读方便</p><p>2、三大组件Servlet、Filter、Listener</p><p>由于SpringBoot是以jar包得方式启动嵌入式得Servlet容器来启动SpringBoot的Web应用，没有web.xml文件。所以采用以下方式注册三大组件</p><p>ServletRegistrationBean</p><p>FilterRegistrationBean</p><p>ServletListenerRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册三大组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(), <span class="string">"/myServlet"</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean filter = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    filter.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    filter.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/myServlet"</span>));</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean listener = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;();</span><br><span class="line">    listener.setListener(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="keyword">return</span> listener;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器：DispatcherServlet</p><p>3、使用其他Servlet容器</p><p>Jetty    –    适用于长连接</p><p>Undertow    –    不支持jsp，但高并发性能优秀</p><p>通过修改pom中的spring-starter</p><p>导入对应的依赖</p><p>==引入web模块的时候默认就是使用嵌入式的Tomcat作为servlet容器==</p><p>4、嵌入式Servlet容器的自动配置原理</p><h2 id="使用外置的Servlet容器"><a href="#使用外置的Servlet容器" class="headerlink" title="使用外置的Servlet容器"></a>使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打包成可直接执行的jar包</p><p>​    优点：简单，便携；</p><p>​    缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedWebServletContainerCustomizer、自己编写嵌入式servlet容器工厂】）</p><p>外置的Servlet容器：例如 在外面安装Tomcat–应用war包的方式打包；</p><p>步骤：</p><p>1）、必须创建一个war项目；可以利用idea创建，简便快捷</p><p>2）、将嵌入式的Temcat指定为provided：目标环境已经有了，不需要打包tomcat</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）、必须编写一个SpringBootServletInitializer的子类，并调用configura方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class ServletInitializer extends SpringBootServletInitializer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;</span><br><span class="line">    &#x2F;&#x2F;传入SpringBoot应用的主程序</span><br><span class="line">        return application.sources(SpringbootWebServletApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）、启动服务器就可以使用了；</p><p>原理：</p><p>如果打包方式为jar包：执行SpringBoot主类的main方法，启动Ioc容器，创建嵌入式的Servlet容器；</p><p>如果打包方式为war包：启动服务器，==服务器启动springboot应用==，才能启动Ioc容器；</p><p>servlet3.0【规范】：参照 【Shared Libraries / runtimes pluggability】</p><p>1）、应用启动的时候，会创建当前web应用里面每一个jar包里面ServletContinerInitializer的实例</p><p>2）、ServletContinerInitializer的实现放在jar包的META-INF/services这个文件夹下，且名命规定为javax.servlet.ServletContainerInitializer的文件，文件内容指向ServletContinerInitializer实现类的全类名</p><p>3）、还可以使用@HandleTypes，在应用启动的时候加载我们感兴趣的类；</p><p>具体流程查看源码；</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 学习笔记</title>
    <link href="/2020/05/08/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/05/08/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="【Spring-Boot-HelloWorld】"><a href="#【Spring-Boot-HelloWorld】" class="headerlink" title="【Spring Boot HelloWorld】"></a>【Spring Boot HelloWorld】</h2><p>一个功能</p><p>浏览器发送hello请求，服务器接收请求并处理，相应Hello World字符串</p><h3 id="创建一个maven工程"><a href="#创建一个maven工程" class="headerlink" title="创建一个maven工程"></a>创建一个maven工程</h3><hr><h3 id="导入spring-boot相关的依赖"><a href="#导入spring-boot相关的依赖" class="headerlink" title="导入spring boot相关的依赖"></a>导入spring boot相关的依赖</h3><p>需要导入的依赖可参照Spring官网guide</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="编写一个主程序-启动Spring-boot应用"><a href="#编写一个主程序-启动Spring-boot应用" class="headerlink" title="编写一个主程序 启动Spring boot应用"></a>编写一个主程序 启动Spring boot应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="编写相关的Controller、Service"><a href="#编写相关的Controller、Service" class="headerlink" title="编写相关的Controller、Service"></a>编写相关的Controller、Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello UnderWorld!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="运行主程序测试"><a href="#运行主程序测试" class="headerlink" title="运行主程序测试"></a>运行主程序测试</h3><hr><h3 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将这个应用打成jar包，使用java -jar指令即可直接运行[内含tomcat服务器及其运行环境]</p><p>打包可以在maven选项卡中的lifecycle中，选择package运行</p><hr><h3 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h3><h4 id="a、父项目"><a href="#a、父项目" class="headerlink" title="a、父项目"></a>a、父项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>真正管理Spring Boot应用里的所有依赖版本</p><p>是Spring Boot的版本仲裁中心，以后我们导入依赖默认是不需要写版本的</p><p>【没有在dependencies里面管理的依赖自然需要声明版本】</p><h4 id="b、导入的依赖"><a href="#b、导入的依赖" class="headerlink" title="b、导入的依赖"></a>b、导入的依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter-web</strong></p><p>​    spring-boot-starter是spring-boot场景启动器，帮我们导入了web模块正常运行所以来的组件</p><p>spring boot将所有的功能场景都抽取出来，做成了一个个的starters【启动器】，只需要在项目里引如这些starter相关场景的所有依赖都会导入进来，要用什么功能就导入什么场景的启动器</p><hr><h3 id="主程序类，主入口类"><a href="#主程序类，主入口类" class="headerlink" title="主程序类，主入口类"></a>主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@SpringBootApplication</strong>说明Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br></pre></td></tr></table></figure><p><strong>@SpringBootConfiguration</strong>–SpringBoot的配置类</p><p>​        标注在某个类上，表示这是一个SpringBoot的配置类</p><p>​        <strong>@Configuration</strong> 配置类上来标注这个注释</p><p>​                配置类    —-    配置文件    配置类也是偶然那个其中的一个组件 @Component</p><p><strong>@EnableAutoConfiguration</strong>–开启自动配置功能</p><p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置，告诉SpringBoot开启自动配置功能，这样自动配置功能才能生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><p><strong>@AutoConfigurationPackage</strong> 自动配置包</p><p>​        @<strong>Import</strong>({Registrar.class})</p><p>​        将我们的主配置类[@SpringBootApplication标注的类]的所在包及一下所有子包里面的所有组件扫描到Spring容器中</p><p>​        Spring的底层注解@import，给容器中导入一个组件</p><p><strong>@Import({EnableAutoConfigurationImportSelector.class})</strong> 启用自动配置导入选择器</p><p>​        将所有需要导入的组件以全类名的方式返回</p><p>​        会给容器中导入非常多的自动配置类【xxxAutoConfiguration】 就是给容器中导入这个场景所需要的所有组件，并配置好这些组件</p><p>​        有了自动配置类，免去了我们手动编写配置注入功能组件等的工作</p><p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classloader)</p><p>​        SpringBoot在启动的时候，从类路径classLoader.getResources(“META-INF/spring.factories”)中获取指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作</p><pre><code>以前我们需要自己配置的东西，自动配置类都帮我们做了</code></pre><p>​        J2EE的整体整合解决方案都在<strong>org.springframework.boot.autoconfigure</strong>这个包中</p><h2 id="【使用Spring-Initializer快速创建springboot项目】"><a href="#【使用Spring-Initializer快速创建springboot项目】" class="headerlink" title="【使用Spring Initializer快速创建springboot项目】"></a>【使用Spring Initializer快速创建springboot项目】</h2><p>IDE都支持使用Spring的项目创建想到快速创建一个Spring Boot项目</p><p>选择我们需要的模块，想到会联网创建Spring Boot项目</p><p>默认生成的Spring Boot项目</p><ul><li><p>主程序已经生成好了，我们只需要编写自己的逻辑</p></li><li><p>resources文件夹中</p><p>​     static 保存所有的静态资源 例如 js css images </p><p>​     templates 保存所有的模板页面</p><p>​            SpringBoot默认jar包使用嵌入式Tomcat 默认不支持jsp页面</p><p>​            可以使用模板引擎 freemaker、thymeleaf</p><p>​            application.properties –Spring Boot应用的配置文件，可以修改一些默认设置</p></li></ul><p>​    </p><h3 id="Spring-Boot配置"><a href="#Spring-Boot配置" class="headerlink" title="Spring Boot配置"></a>Spring Boot配置</h3><h4 id="a、配置文件"><a href="#a、配置文件" class="headerlink" title="a、配置文件"></a>a、配置文件</h4><p>SpringBoot使用一个全局配置，配置文件名是固定的</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的作用</p><p>​        修改SringBoot自动配置的默认值</p><p>​        SpringBoot在底层都给我们自动配置好</p><p>配置文件路径src/main/resources目录或者类路径/config下</p><p>​        -yml是YAML【YAML Ain’t Markup Language】 语言的文件，以数据为中心，比Json、xml等更适合做配置文件</p><p>​        <a href="http://www.yaml.org/" target="_blank" rel="noopener">http://www.yaml.org/</a></p><p>全局配置文件的可以对一些默认配置值进行修改</p><p>​        YAML是一个标记语言</p><p>​        YAML isn’t Markup Language 不是一个标记语言</p><p>标记语言</p><p>​        以前的配置文件    大多都是所以用 xxx.xml文件</p><p>​        YAML 以数据为中心:</p><p>​        YAML配置例子:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>​        XML配置例子:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port:8081</span><br></pre></td></tr></table></figure><h3 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h3><h4 id="a、基本语法"><a href="#a、基本语法" class="headerlink" title="a、基本语法"></a>a、基本语法</h4><p>k:空格v: 表示一堆键值对【空格必须有】</p><p>以空格的缩进来控制层级关系，只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">0001</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性和值也是大小写敏感</p><h4 id="b、值的写法"><a href="#b、值的写法" class="headerlink" title="b、值的写法"></a>b、值的写法</h4><h5 id="I、字面量-普通的值（数字，字符串，布尔"><a href="#I、字面量-普通的值（数字，字符串，布尔" class="headerlink" title="I、字面量: 普通的值（数字，字符串，布尔"></a>I、字面量: 普通的值（数字，字符串，布尔</h5><p>k:v :字面直接来写</p><p>​    字符串默认不用加上单引号或者双引号</p><p>​    “” : 双引号 : 不会转义字符串里面的特殊字符</p><p>​                name : “zhangsan \n lisi”</p><p>​                输出: zhangsan 换行 lisi</p><p>​    ’‘ : 单引号 : 会转移特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                name : ’zhangsan \n lisi‘</p><p>​                输出 :  张三 \n lisi</p><h5 id="II、对象、Map（属性和值-键值对"><a href="#II、对象、Map（属性和值-键值对" class="headerlink" title="II、对象、Map（属性和值-键值对"></a>II、对象、Map（属性和值-键值对</h5><p>​    k:v :</p><p>​        对象还是k:v :的方式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>​    行内写法:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">friends:&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">10</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="III、数组（List、Set"><a href="#III、数组（List、Set" class="headerlink" title="III、数组（List、Set"></a>III、数组（List、Set</h5><p>用-值表示数组中的一个元素</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">&#123;cat,dog,pig&#125;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件注入"><a href="#配置文件注入" class="headerlink" title="配置文件注入"></a>配置文件注入</h3><hr><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">leoroc</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">yes</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">1993</span><span class="string">/8/4</span></span><br><span class="line">  <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="string">v2&#125;</span></span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">administrator</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">leo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">testAccount</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">     <span class="attr">name:</span> <span class="string">dark</span></span><br><span class="line">     <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>javaBean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leoroc.helloworldquickymlconfig.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件总配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span> 告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment"> * prefix = "person" 配置文件中哪个下面的所有属性进行映射</span></span><br><span class="line"><span class="comment"> * 只有这个组件是偶然那个其中的组件，才能容器提供的 <span class="doctag">@ConfigurationProperties</span>功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getBoss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoss</span><span class="params">(Boolean boss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getLists</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLists</span><span class="params">(List&lt;Object&gt; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lists = lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"lastName='"</span> + lastName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", boss="</span> + boss +</span><br><span class="line">                <span class="string">", birth="</span> + birth +</span><br><span class="line">                <span class="string">", maps="</span> + maps +</span><br><span class="line">                <span class="string">", lists="</span> + lists +</span><br><span class="line">                <span class="string">", dog="</span> + dog +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Value获取值和@ConfigurationProperties获取值比较</p><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>必须一个一个指定</td></tr><tr><td>松散绑定（松散语法</td><td>支持【大小写可用-或者_进行标志】</td><td>不支持【属性名大小写必须完全一致】</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p><em>SpEL【Srping Expression Language】，即Spring表达式语言，是比JSP的EL更强大的一种表达语言。</em></p><p>配置文件yml还是properties中他们都能获取到值</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某个值，使用@Value</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，则使用@ConfigurationProperties</p><h4 id="a、配置文件注入值校验"><a href="#a、配置文件注入值校验" class="headerlink" title="a、配置文件注入值校验"></a>a、配置文件注入值校验</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;person&quot;)</span><br><span class="line">@Validated</span><br><span class="line">public class Person &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     *Value中可采用 字面量&#x2F;$&#123;key&#125;从环境变量、配置文件中获取值&#x2F;#&#123;SpEL&#125;三种表达进行赋值</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Email</span><br><span class="line">    private String lastName;</span><br></pre></td></tr></table></figure><h3 id="PropertySource-amp-ImportResource"><a href="#PropertySource-amp-ImportResource" class="headerlink" title="@PropertySource &amp; @ImportResource"></a>@PropertySource &amp; @ImportResource</h3><p>@PropertySource  加载指定配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;person&quot;)</span><br><span class="line">&#x2F;&#x2F;@Validated</span><br><span class="line">@PropertySource(value&#x3D;&#123;&quot;classpath:person.properties&quot;&#125;)</span><br><span class="line">public class Person &#123;</span><br></pre></td></tr></table></figure><p>@ImportResource 导入spring的配置文件，让配置文件里面的内容生效</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别</p><p>想让Spring的配置文件生效，加载进来，则需要使用importResource标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br></pre></td></tr></table></figure><p>导入Spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.leoroc.helloworldquickymlconfig.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot推荐的给容器添加组件的方式，推荐使用全注解的方式</p><p>1、配饰类=====Spring配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leoroc.helloworldquickymlconfig.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leoroc.helloworldquickymlconfig.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指明当前类是一个配置类，就是用来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> * 在配置文件中使用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组建了"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用@Bean给容器中添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"配置类@Bean给容器中添加组建了"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h3><h4 id="a、随机数"><a href="#a、随机数" class="headerlink" title="a、随机数"></a>a、随机数</h4><ul><li><p>RandomValuePropertySource 配置文件中可以使用随机数</p><p>${random.value}</p><p>${random.int}</p><p>${random.long}</p><p>${random.int(10)}</p><p>${random.int[1024,65536]}</p></li></ul><h4 id="b、占位符"><a href="#b、占位符" class="headerlink" title="b、占位符"></a>b、占位符</h4><ul><li><p>属性配置占位符</p><p>app.name=MyApp</p><p>app.description=${app.name} is a Spring Boot application</p><ul><li>可以在配置文件中引用前面配置过的属性（优先级前面配置过的这里都能用</li><li>$(app.name:默认值)来指定找不到属性时的默认值</li></ul></li></ul><h3 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h3><p>Profile是Spring对不同环境提供不同配置功能的支持，可以通过激活、指定参数等方式快速切换环境</p><h4 id="a、多profile文件形式"><a href="#a、多profile文件形式" class="headerlink" title="a、多profile文件形式"></a>a、多profile文件形式</h4><p>​        格式:application-{profile}.properties/yml</p><ul><li>开发环境application-dev.properties</li><li>生产环境application-prod.properties</li></ul><h4 id="b、YML多profile文档块模式"><a href="#b、YML多profile文档块模式" class="headerlink" title="b、YML多profile文档块模式"></a>b、YML多profile文档块模式</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">为空则使用默认，指定dev或者prod则跳转到对应文档块的参数配置</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span> <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><h4 id="c、激活方式"><a href="#c、激活方式" class="headerlink" title="c、激活方式"></a>c、激活方式</h4><ul><li><p>命令行 –spring.profiles.active=dev</p><ul><li>在运行容器中的Program arguments，使用命令行指定标识进行配置</li><li>或者在cmd中使用java -jar 【path】–spring.profiles.active=dev</li></ul></li><li><p>配置文件 spring.profiles.active=dev</p><p>​    在配置文件中指定pring.profiles.active=dev</p></li><li><p>jvm参数（虚拟机参数 -Dspring.profiles.active=dev</p><ul><li>在运行容器中的VM options中指定参数进行运行（-D为固定写法</li></ul></li></ul><h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h3><p>Spring boot启动会扫描一下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>​    – file:./config/</p><p>​    –file:./</p><p>​    –classpath:/config/</p><p>​    –classpath:/</p><p>以上是按照优先级从高到低的顺序，所有位置的文件都会被加载，高优先级配置内容会覆盖低优先级配置的内容</p><p>我们也可以通过配置spring.cinfig.location来改变默认配置</p><h3 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a>外部配置加载顺序</h3><p>Spring Boot支持多种外部配置方式，可以从以下位置加载配置，按照优先级从高到低：高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</p><p><strong>1、命令行参数</strong></p><p>java -jar 【path】 –server.port=8081 –server.context-path = /abc</p><p>【多个参数可以使用空格–的形式来进行分割】</p><p>2、来自java：comp/env的JNDI属性</p><p>3、Java系统属性（System.getProperties（））</p><p>4、操作系统环境变量</p><p>5、RandomValuePropertySource配置的random.*属性值</p><p><em>由jar包外向jar包内进行寻找</em></p><p><em>A.优先加载带profile</em></p><p><strong>6、jar包外部的application-{profile}.properties或application.yml（带spring.profile）配置文件</strong></p><p><strong>7、jar包内部的application-{profile}.properties或application.yml（带spring.profile）配置文件</strong></p><p><em>B.再来加载不带profile</em></p><p><strong>8、jar包外部的application.properties或application.yml（不带spring.profile）配置文件</strong></p><p><strong>9、jar包内部的application.properties或application.yml（不带spring.profile）配置文件</strong></p><p>10、@Configuration注解类上的@PropertySource</p><p>11、通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源参考官方文档</p><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p>配置文件能配置的属性参照官网</p><p>自动配置原理：</p><p>a、Spring boot启动的时候，加载著配置类，开启了自动配置功能@EnableAutoConfiguration</p><p>b、@EnableAutoConfiguration的作用：</p><ul><li><p>利用EnableAutoConfigurationImportSelector给容器导入了一些组件</p></li><li><p>可以查看selectimports（）方法的内容</p><ul><li><p>List<String> configuragions = getCandidateConfigurations(annotationMetadata,attributes)；获取候选的配置</p></li><li><pre><code>List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),      getBeanClassLoader()); //扫描所有jar包类路径下的所有资源 META-INF/spring.factories //把扫描到的文件的内容包装成properties对象 //从properties中获取EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​将类路径下 META-INF&#x2F;spring-factories里面配置的所有EnableAutoConfiuration的值加入到容器中；</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;factories</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br><span class="line">&#x2F;&#x2F;每一个这样的xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中，用他们来做自动配置</span><br></pre></td></tr></table></figure></code></pre></li><li><p>每一个自动配置进行自动给配置功能</p></li><li><p>以HttpEncodingAutoConfiguration【Http编码自动配置】为例解释自动配置原理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)<span class="comment">//表示这是一个配置类</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpProperties<span class="class">.<span class="keyword">class</span>)//启动指定类的<span class="title">ConfigurationProperties</span>功能，将配置文件中对应的值和<span class="title">HttpProperties</span>绑定起来；并把<span class="title">HttpEncodingProperties</span>加入到<span class="title">Ioc</span>容器中</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span>(<span class="title">type</span> </span>= ConditionalOnWebApplication.Type.SERVLET) <span class="comment">//Spring底层@Conditional注解，根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效； 判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>) //判断当前项目有没有指定类<span class="title">CharacterEncodingFilter</span>，<span class="title">SpringMVC</span>中进行乱码解决的过滤器</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>) <span class="comment">//判断配置文件中是否存在某个配置spring.http.encoding.enabled； 如果不存在，判断也成立，返回true，即即使配置文件中即使不配置spring.http.encoding.enabled，也默认生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//已经和SpringBoot的配置文件映射了</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有一个有参构造器的情况下，参数的值会从容器中拿</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从给properties中获取</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//判断容器中没有这个bean组件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>根据当前不同的条件判断，决定这个配置类是否生效</em></p><p>一旦这个配置类生效，这个配置类就会给容器中添加各种组件，这些组件的属性是从对应的properties类中获取的，而这些类里面的每一个属性又是和配置文件绑定的；</p></li><li><p>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着，配置文件能配置什么就可以参照某个功能对应的这个属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http"</span>) <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;我们能配置的属性都是来源于这个功能的properties类</span><br><span class="line">spring.http.encoding.enabled&#x3D;true</span><br><span class="line">spring.http.encoding.charset&#x3D;UTF-8</span><br><span class="line">spring.http.encoding.force&#x3D;true</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="自动配置原理细节"><a href="#自动配置原理细节" class="headerlink" title="自动配置原理细节"></a>自动配置原理细节</h3><p>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置类里的所有内容才生效</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean</td></tr><tr><td>@ConditionalOnExpression</td><td>满足指定SpEL表达式</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web系统环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web系统环境</td></tr><tr><td>@ConditionalOnjndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定的条件下才能生效</strong></p><p>我们怎么知道哪些自动配置类生效了：在配置文件中添加属性</p><p>//开启SpringBoot的debug模式</p><p>debug=true</p><p>我们可以通过debug=true属性，来让控制台打印自动配置报告，这样我们就可以很方便的得值哪些自动配置类生效（Positive matches），哪些未生效（Negative matches）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Positive matches: <span class="comment">//生效的配置</span></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnProperty</span> (spring.aop.auto=<span class="keyword">true</span>) matched (OnPropertyCondition)</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration.ClassProxyingConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnMissingClass</span> did not find unwanted <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">aspectj</span>.<span class="title">weaver</span>.<span class="title">Advice</span>' (<span class="title">OnClassCondition</span>)</span></span><br><span class="line"><span class="class">      - @<span class="title">ConditionalOnProperty</span> (<span class="title">spring</span>.<span class="title">aop</span>.<span class="title">proxy</span>-<span class="title">target</span>-<span class="title">class</span></span>=<span class="keyword">true</span>) matched (OnPropertyCondition)</span><br><span class="line">......</span><br><span class="line">Negative matches: <span class="comment">//未生效的配置</span></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   ActiveMQAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required <span class="class"><span class="keyword">class</span> '<span class="title">javax</span>.<span class="title">jms</span>.<span class="title">ConnectionFactory</span>' (<span class="title">OnClassCondition</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">   AopAutoConfiguration.AspectJAutoProxyingConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">aspectj</span>.<span class="title">weaver</span>.<span class="title">Advice</span>' (<span class="title">OnClassCondition</span>)</span></span><br><span class="line"><span class="class"> ......</span></span><br></pre></td></tr></table></figure><h3 id="SpringBoot精髓"><a href="#SpringBoot精髓" class="headerlink" title="SpringBoot精髓"></a>SpringBoot精髓</h3><ol><li>SpringBoot启动会自动加载大量的自动配置类</li><li>我们看我们需要的功能有没有跟SpringBoot默认鞋好的自动配置类</li><li>我们再来看这个自动配置类中到底配置了哪些组件，只要我们要用的组件有，我们就不需要再来配置了</li><li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值</li></ol><p>xxxxAutoconfiguration：自动配置类</p><p>给容器中添加组件</p><p>xxxxProperties：封装配置文件中的相关属性</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h4><p>​        市面上的日志框架：</p><p>​        JUL</p><p>​        JCL</p><p>​        Jboss-logging</p><p>​        logback</p><p>​        log4j</p><p>​        log4j2</p><p>​        slf4j</p><table><thead><tr><th>日志门面（日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta Commons Logging</del>）SLF4J(Simle Logging Facade for java) <del>jboss-logging</del></td><td>Log4j JUL(java.util.logging) log4j2 Logback</td></tr></tbody></table><p>左边选一个门面（抽象层），右边选一个实现</p><p>日志门面 ： SLF4J；</p><p>日志实现 ： Logback；</p><p>SpringBoot : 底层是Spring框架，Sring框架默认是JCL</p><p>​        SpringBoot选用SLF4J和logback；</p><h4 id="2、SLF4J使用"><a href="#2、SLF4J使用" class="headerlink" title="2、SLF4J使用"></a>2、SLF4J使用</h4><h5 id="【a】如何在系统中使用SLF4j"><a href="#【a】如何在系统中使用SLF4j" class="headerlink" title="【a】如何在系统中使用SLF4j"></a>【a】如何在系统中使用SLF4j</h5><p>以后开发的时候，日志记录方法的调用，不应该来直接来调用日志的实现，而是调用日志抽象层里面的方法；</p><p>给系统里面导入slf4j的jar包和logback的实现jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用图示</p><p><img src="http://www.slf4j.org/images/concrete-bindings.png" alt="click to enlarge"></p><p>每一个日志的实现框架，都有自己的配置文件。</p><p>使用slf4j以后，配置文件还是做成日志实现框架的配置文件。（使用实现框架自身的配置文件）</p><h5 id="【b】遗留问题"><a href="#【b】遗留问题" class="headerlink" title="【b】遗留问题"></a>【b】遗留问题</h5><p>a(slf4j+logback) : Spring(commons-logging)、Hibernate(jboss-logging)、MyBatis…</p><p>同一日志记录，即使是别的框架，和我统一使用slf4j+logback进行输出？</p><p>使用图示</p><p><img src="http://www.slf4j.org/images/legacy.png" alt="click to enlarge"></p><p>如何让系统中所有的日志都统一到slf4j：</p><p>1、将系统中其他日志框架先排除出来；</p><p>2、用中间包来替换原有的日志框架</p><p>3、我们再来导入slf4j其他的实现</p><h4 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot使用它来做日志功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>​    1）、SringBoot底层也是使用slf4j+logback的方式进行日志</p><p>​    2）、SpringBoot也把其他的日志都替换成了slf4j</p><p>​    3）、中间替换包</p><p>​    4）、如果我们要引入其他框架，一定要把这个框架的默认日志依赖移除掉</p><p>​    5）SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式就日志，引入其他框架的时候，只需要把这个依赖排除即可</p><h4 id="4、日志使用"><a href="#4、日志使用" class="headerlink" title="4、日志使用"></a>4、日志使用</h4><p><strong>1、系统默认配置好了日志框架</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//日志的级别</span></span><br><span class="line">    <span class="comment">//日志级别由低到高</span></span><br><span class="line">    <span class="comment">//可以调整输出的日志级别，日志就只会在这个级别以及以后的高级别生效</span></span><br><span class="line">    logger.trace(<span class="string">"这是trace日志。。。"</span>);</span><br><span class="line">    logger.debug(<span class="string">"这是debug日志。。。"</span>);</span><br><span class="line">    <span class="comment">//SringBoot默认给我们使用的是info的级别,如果没有在欸之文件中指定级别，则使用root级别</span></span><br><span class="line">    logger.info(<span class="string">"这是info日志。。。"</span>);</span><br><span class="line">    logger.warn(<span class="string">"这是warn日志。。。"</span>);</span><br><span class="line">    logger.error(<span class="string">"这是error日志。。。"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//新版本中对file和path属性进行移除，合并为以下属性</p><p>//可使用logging.file.path进行日志文件输出的控制，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logging.file.path = C:/springboot.log//（系统路径）</span><br><span class="line">//或</span><br><span class="line">logging.file.path = springboot.log//（项目中相对路径）</span><br></pre></td></tr></table></figure><p>修改在控制台输出的日志格式</p><p>%d：表示日期时间，</p><p>%thread：表示线程名</p><p>%-5level：级别从左显示5个字符宽度</p><p>%-logger{50}：表示logger名字最长50个字符，否则按照句点分割</p><p>%msg：日志信息</p><p>%n：换行符</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.pattern.console=%d&#123;yyyy-MM-dd HH:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure><p><strong>2.指定配置文件</strong></p><p>给类路径下放上每个框架对应的配置文件即可，SpringBoot就不使用自身的默认配置</p><table><thead><tr><th align="center">Logging System</th><th>Customization</th></tr></thead><tbody><tr><td align="center">Logback</td><td>logback-spring.xml , logback-sring.groovy , logback,xml or logback.groovy</td></tr><tr><td align="center">Log4j2</td><td>log4j2-sring.xml or log4j2.xml</td></tr><tr><td align="center">JDK (Java Util Logging)</td><td>logging.properties</td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了</p><p>logback-spring.xml：日志框架就不直接加载日志的配置项，而由SpringBoot进行解析，从而可以使用profile功能，针对不同的运行环境，使用不同的配置进行日志输出，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>否则直接使用springProfile功能会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no applicable action <span class="keyword">for</span> [springProfile]</span><br></pre></td></tr></table></figure><h4 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h4><p>没啥意义。</p><p>可以按照slf4j的日志框架适配图，进行相关的切换；</p><ul><li><p>切换为log4j2</p><p>在pom中将spring-boot-starter-logging切换为spring-boot-starter-log4j2即可</p></li></ul><h2 id="【SpringBoot与数据访问】"><a href="#【SpringBoot与数据访问】" class="headerlink" title="【SpringBoot与数据访问】"></a>【SpringBoot与数据访问】</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​    对于数据访问层，无论是SQL还是NOSQL，SpringBoot默认采用整合Spring Data的方式进行统一处理，添加大量自动配置，屏蔽了很多设置。引入各种xxxTemplate，xxxRepository来简化我们对数据访问层的操作。对我们来说只需要进行简单的设置即可。我们将在数据访问张截测试使用SQL相关、NOSQL在缓存、消息、检索等张截的测试。</p><ul><li>JDBC</li><li>MyBatis</li><li>JPA</li></ul><p>想访问数据库，需在配置文件中进行配置yaml或者properties</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leoroc</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">11235813</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:oracle:thin:@localhost:1521:orcl</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">oracle.jdbc.OracleDriver</span></span><br></pre></td></tr></table></figure><p>效果：</p><p>​    默认采用com.zaxxer.hikari.HikariDataSource作为数据源；</p><p>​    数据源的相关配置都在DataSourceProperties这个类中，可参考属性进行配置；</p><p>自动配置原理：</p><p>​    都在org.springframework.boot.autoconfigure.jdbc中：</p><p>1、参考DataSourceProperties，根据配置创建数据源，2.0版本引入Hikari连接池，性能优于druid，但是druid有全面的安全等问题的解决方案，市面上druid的使用较多，所以先进性druid的学习</p><p>2、SpringBoot默认可以支持：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.apach.tomcat.jdbc.pool.DataSource.</span><br><span class="line">Hikari</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>3、自定义数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generic DataSource configuration.可以自定义数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(DataSource<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">name</span> </span>= <span class="string">"spring.datasource.type"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用dataSourceBuilder来创建数据源，利用反射创建相应type的数据源，并且绑定相关属性</span></span><br><span class="line"><span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、DataSourceInitializerInvoker、DataSourceInitializationConfiguration</p><p>作用：</p><p>​    1）、runSchemaScripts（）：运行建表语句；</p><p>​    2）、runDataScriptes（）：运行插入数据的sql语句；</p><p>默认只需要将文件命名为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bean to handle &#123;<span class="doctag">@link</span> DataSource&#125; initialization by running &#123;<span class="doctag">@literal</span> schema-*.sql&#125; on</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> InitializingBean#afterPropertiesSet()&#125; and &#123;<span class="doctag">@literal</span> data-*.sql&#125; SQL scripts on</span></span><br><span class="line"><span class="comment"> * a &#123;<span class="doctag">@link</span> DataSourceSchemaCreatedEvent&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> DataSourceAutoConfiguration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSourceInitializerInvoker</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">DataSourceSchemaCreatedEvent</span>&gt;, <span class="title">InitializingBean</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>建表：schema-*.sql</p><p>数据：data-*.sql</p><p>5、操作数据库：自动配置了jdbcTemplate操作数据库</p><p>以下为jdbcTemplate的使用案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">map</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(<span class="string">"SELECT * FROM account"</span>);</span><br><span class="line">        <span class="keyword">return</span> maps.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合基本JDBC与数据源"><a href="#整合基本JDBC与数据源" class="headerlink" title="整合基本JDBC与数据源"></a>整合基本JDBC与数据源</h3><p>使用druid数据源</p><ul><li><p>引入druid</p></li><li><p>配置属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入druid数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定配置文件</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Druid的监控</span></span><br><span class="line"><span class="comment">     * 1、配置一个管理后台的Servlet</span></span><br><span class="line"><span class="comment">     * StatViewServlet是帮我们控制嵌入管理后台的servlet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        <span class="comment">//配置初始化参数</span></span><br><span class="line">        Map&lt;String,String&gt; paramters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        paramters.put(<span class="string">"loginUsername"</span>,<span class="string">"leoroc"</span>);</span><br><span class="line">        paramters.put(<span class="string">"loginPassword"</span>,<span class="string">"11235813"</span>);</span><br><span class="line">        <span class="comment">//为空则默认全部允许</span></span><br><span class="line">        paramters.put(<span class="string">"allow"</span>,<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//阻止访问</span></span><br><span class="line">        paramters.put(<span class="string">"deny"</span>,<span class="string">"192.168.15.21"</span>);</span><br><span class="line">        bean.setInitParameters(paramters);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置一个web监控的filter</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">FilterRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置排除</span></span><br><span class="line">        params.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line">        bean.setInitParameters(params);</span><br><span class="line">        <span class="comment">//全部拦截</span></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="整合MyBytis"><a href="#整合MyBytis" class="headerlink" title="整合MyBytis"></a>整合MyBytis</h3><p>1、引入mybatis-starter</p><p>​    -mybatis-spring-boot-starter</p><p>2、注解模式</p><p>3、配置文件模式</p><p>4、测试</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM详解</title>
    <link href="/2020/05/08/JVM%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/05/08/JVM%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM详解"><a href="#JVM详解" class="headerlink" title="JVM详解"></a>JVM详解</h1><h2 id="JVM-内存结构-基于JDK8"><a href="#JVM-内存结构-基于JDK8" class="headerlink" title="JVM 内存结构(基于JDK8)"></a>JVM 内存结构(基于JDK8)</h2><p>java内存区域</p><ul><li><p>线程共享区域</p><ul><li><p>方法区(Method Area) : </p><p>​    用于存储已经被虚拟机加载的类信息(即加载类时需要加载的信息，包括版本、field、方法、接口等信息)、final常量、静态变量、编译器即时编译的代码等。</p><p>​    在内存不足时抛出<em>Out Of Memory Error : PermGen space</em>异常</p><ul><li><p>运行时常量池(Runtime Constant Pool) : </p><p>​    用于存储编译期就生成的字面常量、符号引用、翻译出来的直接引用</p></li></ul></li><li><p>堆区(Heap) : </p><p>​    堆区的存在是为了存储对象实例，原则上讲，所有的对象都在堆区上分配内存(不过现代技术里，也不是这么绝对的，也有栈上直接分配的)。</p><p>​    <strong>堆区是理解java GC机制的最重要的区域，没有之一。</strong></p><p>​    在JVM所管理的内存中，堆区是最大的一块，堆区也是Java GC机制所管理的主要那日村区域。</p><p>​    如果在执行垃圾回收之后，仍然没有足够的内存分配，也不能再进行扩展，将会抛出</p><p>​    <em>Out Of MemoryError : Java heap space</em> 异常</p></li><li><p>直接内存(Direct Memory) : </p><p>​    直接内存，就是JVM以外的机器内存(比如，你有4G的内存，JVM占用了1G，则其余的3G就是直接内存)。</p><p>​    JDK中有一种基于通道(Channel)和缓冲区(Buffer)的内存分配方式，将由C语言实现的native函数库分配在直接内存中，用于存储再JVM堆中DirectByteBuffer来引用。</p><p>​    由于直接内存受到本及其内存的限制，所以也有可能出现<em>Out Of MemoryError</em>的异常</p></li></ul></li><li><p>线程私有区域</p><ul><li><p>本地方法栈(Native Method Stack) :</p><p>​    该区域是每个线程锁独有的，主要用于VM的Native方法。</p><p>​    这部分是由VM自行管理，程序员基本上不需要关注该部分。</p></li><li><p>JVM虚拟机栈(JVM Stack) :</p><p>​    该区域也是每个线程所独有的，与本地方法栈是类似的，唯一的区别是它为VM执行Java方法服务。</p><p>​    该区域只要维护栈针(每调用一个方法，则VM就会创建一个栈针保护当前方法的状态，并将其压入栈中，当被条用的方法完成后，再将其出栈继续执行未完成的方法)，有一定的深度，可能会抛出StackOverflowError和OutOfMemoryError。</p></li><li><p>程序计数器(Program Counter Register) :</p></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JUNIT</title>
    <link href="/2020/05/08/JUNIT/"/>
    <url>/2020/05/08/JUNIT/</url>
    
    <content type="html"><![CDATA[<h1 id="JUNIT"><a href="#JUNIT" class="headerlink" title="JUNIT"></a>JUNIT</h1><h2 id="Junit-测试框架"><a href="#Junit-测试框架" class="headerlink" title="Junit-测试框架"></a>Junit-测试框架</h2><h3 id="【什么是Junit测试框架】"><a href="#【什么是Junit测试框架】" class="headerlink" title="【什么是Junit测试框架】"></a>【什么是Junit测试框架】</h3><pre><code>Junit是要给回归测试框架，被开发者用于试试对应用程序的单元测试，加快程序编制速度，同事提高编码的质量。JUnit测试框架能够轻松完成以下任意两种结合:</code></pre><ul><li>Eclipse继承开发环境</li><li>Ant打包工具</li><li>Maven项目构建管理</li></ul><h3 id="【特性】"><a href="#【特性】" class="headerlink" title="【特性】"></a>【特性】</h3><p>JUnit测试框架具有以下重要特性；</p><ul><li>测试工具</li><li>测试套件</li><li>测试运行期</li><li>测试分类</li></ul><h4 id="·测试工具"><a href="#·测试工具" class="headerlink" title="·测试工具"></a>·测试工具</h4><h5 id="定义"><a href="#定义" class="headerlink" title="- 定义"></a>- 定义</h5><p>​        测试工具是一整套固定的工具用于<strong>基线测试(Baseline tests)</strong>。测试工具的目的是为了确保测试能够在共享且固定的环境中运行，因此保证测试结果的可重复性。它包括:</p><ul><li>在所有测试调用指令发七千的setUp()方法。</li><li>在测试方法运行后的tearDown()方法。</li></ul><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> value1,value2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// assigning the values</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">value1 = <span class="number">3</span>;</span><br><span class="line">value2 = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test methoed to add two values </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> result = value1 + value2;</span><br><span class="line">        <span class="comment">// true|false -&gt; success|failure</span></span><br><span class="line">assertTrue(result == <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="assertEquals-和-assertTrue区别"><a href="#assertEquals-和-assertTrue区别" class="headerlink" title="- assertEquals 和 assertTrue区别"></a>- assertEquals 和 assertTrue区别</h5><ul><li>App.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leoroc.Test</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.getClass().getName();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AppTest.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leoroc.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须是static</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    App app = <span class="keyword">new</span> App();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBaseClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">     assertTrue(app.method().equals(<span class="string">"com.leoroc.Test.App"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testmethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="string">"com.leoroc.Test.App"</span>, app.method());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>结论:</p><p>两种方法都可以判断，一般建议使用assertEquals 容易调试</p><p>相同之处：都能判断两个值是否相等<br>assertTrue 如果为true，则运行success，反之Failure<br>assertEquals 如果预期值与真实值相等，则运行success，反之Failure</p><p>不同之处：<br>assertEquals 运行Failure会有错误提示，提示预期值是xxx，而实际值是xxx。容易调式<br>assertTrue 没有错误提示</p></li></ul><h4 id="·测试套件"><a href="#·测试套件" class="headerlink" title="·测试套件"></a>·测试套件</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="- 定义"></a>- 定义</h5><p>​        测试套件意味着捆绑几个测试案例并且同事运行。在JUnit种，@RunWith和@Suite都被用作运行测试套件。</p><p>​        以下为使用TestJunit1 和TestJunit2的测试分类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JUnit Suite Test</span></span><br><span class="line"><span class="meta">@RunWith</span>(Suite<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Suite</span>.<span class="title">SuiteClasses</span>(</span>&#123; </span><br><span class="line">   TestJunit1<span class="class">.<span class="keyword">class</span> ,<span class="title">TestJunit2</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JunitTestSuite</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJunit1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   String message = <span class="string">"Robert"</span>;   </span><br><span class="line">   MessageUtil messageUtil = <span class="keyword">new</span> MessageUtil(message);</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintMessage</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      System.out.println(<span class="string">"Inside testPrintMessage()"</span>);    </span><br><span class="line">      assertEquals(message, messageUtil.printMessage());     </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJunit2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   String message = <span class="string">"Robert"</span>;   </span><br><span class="line">   MessageUtil messageUtil = <span class="keyword">new</span> MessageUtil(message);</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSalutationMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside testSalutationMessage()"</span>);</span><br><span class="line">      message = <span class="string">"Hi!"</span> + <span class="string">"Robert"</span>;</span><br><span class="line">      assertEquals(message,messageUtil.salutationMessage());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="·测试运行期"><a href="#·测试运行期" class="headerlink" title="·测试运行期"></a>·测试运行期</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>​        测试运行期用于执行测试案例。</p><p>​        以下为假定测试分类成立的情况下的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.JUnitCore;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.Result;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.notification.Failure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Result result = JUnitCore.runClasses(TestJunit<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">for</span> (Failure failure : result.getFailures()) &#123;</span><br><span class="line">         System.out.println(failure.toString());</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(result.wasSuccessful());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="·测试分类"><a href="#·测试分类" class="headerlink" title="·测试分类"></a>·测试分类</h4><h5 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h5><p>​        测试分类是在编写和测试JUnit的重要分类。</p><ul><li>包含一套断言方法的测试断言</li><li>包含规定运行多重测试工具的测试用例</li><li>包含收集执行测试用例结果的方法的测试结果</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker简略学习</title>
    <link href="/2020/05/08/Docker%E7%AE%80%E7%95%A5%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/05/08/Docker%E7%AE%80%E7%95%A5%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；</p><p>官方解释：</p><p>Docker是一个开源的应用容器引擎，基于Go语言并遵从Apache2.0协议开源。</p><p>Docker可以让开发者打包他们的应用以击依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。</p><p>通俗的解释：</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发不出去，其他使用者可以直接使用这个镜像。运行中的这个镜像成为容器，容器启动是非常快速的，类似windows里面的ghost操作系统，安装好之后什么都有了；</p><h2 id="Docker核心概念"><a href="#Docker核心概念" class="headerlink" title="Docker核心概念"></a>Docker核心概念</h2><p>docker主机（Host）：安装了Docker程序的机器（Docker直接安装在操作系统上的）；</p><p>docker客户端（Client）：连接docker主机进行操作；客户端通过命令行或者其他工具使用Docker</p><p>docker仓库（Registry）：用来保存各种打包好的软件镜像；</p><p>docker镜像（Images）：软件打包好的镜像，放在docker仓库中；</p><p>docker容器（Container）：镜像启动后的实例，我们称为一个容器；容器是独立运行的一个或者一组应用（例如我们可以同时运行多个tomcat镜像）；</p><p>使用Docker的步骤：</p><p>​    1）、安装Docker</p><p>​    2）、去Docker仓库找到这个软件对应的镜像；</p><p>​    3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p><p>​    4）、对容器的启动停止就是对软件的启动停止。</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>我们通过linux虚拟机进行模拟</p><p>1）、VMWare，VirtualBox</p><p>2）、导入虚拟机文件centos7</p><p>3）、安装启动linux虚拟机，并登录</p><p>4）、使用客户端连接linux服务器进行命令操作；</p><p>5）、设置虚拟机网络；</p><p>​        桥接网络-&gt;选好当前网络使用的网卡（有线or无线）-&gt;（高级）勾选接入网线；</p><p>6）、具体安装查看网上教程</p><p>7）、安装完之后输入systemctl -v可查看版本</p><p>systemctl enable docker 可以设置开机自动启用docker</p><p>systemctl start docker 开启docker</p><p><strong><em>更多命令可参考官方文档，以下为常用命令</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">搜索镜像</span><br><span class="line">docker search tomcat</span><br><span class="line">拉取镜像</span><br><span class="line">docker pull tomcat</span><br><span class="line">根据镜像启动容器</span><br><span class="line">docker run --name myTomcat -d tomcat</span><br><span class="line">查看运行中的容器</span><br><span class="line">docker ps</span><br><span class="line">停止运行中的容器</span><br><span class="line">docker stop 容器ID</span><br><span class="line">查看所有容器</span><br><span class="line">docker ps -a</span><br><span class="line">启动容器</span><br><span class="line">docker start 容器ID</span><br><span class="line">删除一个容器</span><br><span class="line">docker rm 容器ID</span><br><span class="line">端口映射</span><br><span class="line">docker run -d -p 8888:8080 tomcat</span><br><span class="line">-d 后台运行</span><br><span class="line">-p 将主机的端口映射到容器的一个端口主机端口：容器内部端口</span><br><span class="line"></span><br><span class="line">查看linux的防火墙状态</span><br><span class="line">server firewalld status;</span><br><span class="line">关闭防火墙</span><br><span class="line">server firewalld stop;</span><br><span class="line"></span><br><span class="line">查看容器日志</span><br><span class="line">docker logs 容器ID</span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>1、安装mysql</p><p>docker images</p><p>2、安装redis</p><p>3、安装rabbitmq</p><p>4、安装elasticsearch</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Debug By Idea</title>
    <link href="/2020/05/08/Debug%20By%20Idea/"/>
    <url>/2020/05/08/Debug%20By%20Idea/</url>
    
    <content type="html"><![CDATA[<h1 id="【Idea-Debug学习】"><a href="#【Idea-Debug学习】" class="headerlink" title="【Idea Debug学习】"></a>【Idea Debug学习】</h1><h2 id="01、Debug简介"><a href="#01、Debug简介" class="headerlink" title="01、Debug简介"></a>01、Debug简介</h2><ul><li><p>什么是程序Debug？</p><ul><li>Debug是程序开发人员必需掌握的一项调试程序的技能</li><li>企业中程序开发和程序调试的比例为1：1.，可以说如果你不会调试程序，你就没有办法从事编程工作</li></ul></li></ul><ul><li>Debug能帮助我们做什么？<ul><li>追踪代码的运行流程</li><li>程序运行异常定位和调试</li><li>线上问题追踪</li></ul></li></ul><ul><li>Debug对于程序学习者的意义<ul><li>通过调试能够更好的查看程序的执行流程</li><li>复杂的程序逻辑，通过老师的口述讲解，很难理解清楚，这个时候借助调试能够很好的帮助同学们理解程序</li><li>定位问题，提高自我解决问题的能力</li></ul></li></ul><h2 id="02、IDEA中的Debug步骤"><a href="#02、IDEA中的Debug步骤" class="headerlink" title="02、IDEA中的Debug步骤"></a>02、IDEA中的Debug步骤</h2><ul><li>设置断点 F9</li><li>调试程序</li></ul><table><thead><tr><th>按钮</th><th>说明</th></tr></thead><tbody><tr><td>alt + F10</td><td>如果你的光标在其他行或者其他页面，点击这个按钮可跳转到当前代码执行的行</td></tr><tr><td>F8</td><td>步过，一步一步地执行下去，如果这一行上有方法不会进入方法</td></tr><tr><td>F7</td><td>步入，能够进入任何方法，经常使用查看底层源码，不会进入官方类库的方法</td></tr><tr><td>alt + shift + F7</td><td>强制步入，能够进入任何方法，查看底层源码的时候可以用这个方法进入官方类库的方法</td></tr><tr><td>shift +F8</td><td>步出，从不如的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值</td></tr><tr><td>alt + F9</td><td>运行到光标处，你可以将光标定位到你需要查看的那一行，然后使用这个功能，代码回运行至光标处，而不需要打断点</td></tr><tr><td>alt + F8</td><td>计算表达式</td></tr></tbody></table><p>步过：一行一行地执行程序</p><p>步入：一行一行地执行程序，若存在方法（不进入系统源码方法，只进入自定义方法），则进入方法进行步过</p><h2 id="03、步过调试地使用"><a href="#03、步过调试地使用" class="headerlink" title="03、步过调试地使用"></a>03、步过调试地使用</h2><ul><li>步过调试<ul><li>步过调试按钮 F8</li></ul></li><li>作用<ul><li>步过，一行一行地往下走，如果这一行上有方法不会进入方法</li><li>常用于调试过程中不想进入调试的方法体的情况</li></ul></li></ul><h2 id="04、步入调试地使用"><a href="#04、步入调试地使用" class="headerlink" title="04、步入调试地使用"></a>04、步入调试地使用</h2><ul><li>步入调试<ul><li>步过调试按钮 F7</li></ul></li><li>作用<ul><li>步入，一行一行地往下走，如果这一行上有方法，则进入方法内部</li><li>一般用于进入自定义方法内，不会进入官方类库的方法</li></ul></li></ul><h2 id="05、强制步入"><a href="#05、强制步入" class="headerlink" title="05、强制步入"></a>05、强制步入</h2><ul><li>强制步入调试<ul><li>强制步入调试按钮 alt + shift +F7</li></ul></li><li>作用 <ul><li>进入官方类库方法</li><li>帮助我们学习和查看JDK源码</li></ul></li></ul><h2 id="06、步出调试的使用"><a href="#06、步出调试的使用" class="headerlink" title="06、步出调试的使用"></a>06、步出调试的使用</h2><ul><li>步出调试<ul><li>步出调试按钮 shift + F8</li></ul></li><li>作用<ul><li>从方法内退出到方法调用处</li><li>调试的时候，有时候会跳入到自己不想查看的方法体，这个时候使用步出</li></ul></li></ul><h2 id="07、回退到断点"><a href="#07、回退到断点" class="headerlink" title="07、回退到断点"></a>07、回退到断点</h2><ul><li>回退断点<ul><li>回退断点按钮</li></ul></li><li>作用<ul><li>回退到当前方法的调用处</li><li>当重新查看该方法体的执行过程，不用重新启动Debug，可以使用回退断点方式。</li></ul></li></ul><h2 id="08、运行到光标处"><a href="#08、运行到光标处" class="headerlink" title="08、运行到光标处"></a>08、运行到光标处</h2><ul><li>运行到光标处<ul><li>运行光标处按钮 F9</li></ul></li><li>作用<ul><li>使程序运行到光标处，而无需设置断点</li></ul></li></ul><h2 id="09、计算表达式"><a href="#09、计算表达式" class="headerlink" title="09、计算表达式"></a>09、计算表达式</h2><ul><li>计算表达式<ul><li>计算表达式按钮 Alt + F8</li></ul></li><li>作用<ul><li>设置变量，在计算表达式的框里，可以改变变量的值，这样有时候就能很方便我们去调试各种值的情况了。</li></ul></li></ul><h2 id="10、条件断点"><a href="#10、条件断点" class="headerlink" title="10、条件断点"></a>10、条件断点</h2><ul><li>条件断点<ul><li>右键单击断点处，可以设置进入断点的条件</li></ul></li><li>作用<ul><li>通过设置断点条件，在满足条件时，才挺在断点处，否则直接运行</li></ul></li></ul><h2 id="11、多线程调试"><a href="#11、多线程调试" class="headerlink" title="11、多线程调试"></a>11、多线程调试</h2><ul><li><p>步骤</p><ul><li>多线程调试，需要调整断点挂起级别为Thread</li><li>Frame中选择线程进行测试</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
